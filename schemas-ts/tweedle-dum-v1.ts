// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class TweedleDumV1 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TweedleDumV1 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTweedleDumV1(bb:flatbuffers.ByteBuffer, obj?:TweedleDumV1):TweedleDumV1 {
  return (obj || new TweedleDumV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTweedleDumV1(bb:flatbuffers.ByteBuffer, obj?:TweedleDumV1):TweedleDumV1 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TweedleDumV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

theSlice(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

theSliceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

theSliceArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

theBool():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_the_bool(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

static startTweedleDumV1(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTheSlice(builder:flatbuffers.Builder, theSliceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, theSliceOffset, 0);
}

static createTheSliceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTheSliceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTheBool(builder:flatbuffers.Builder, theBool:boolean) {
  builder.addFieldInt8(1, +theBool, +false);
}

static endTweedleDumV1(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishTweedleDumV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedTweedleDumV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createTweedleDumV1(builder:flatbuffers.Builder, theSliceOffset:flatbuffers.Offset, theBool:boolean):flatbuffers.Offset {
  TweedleDumV1.startTweedleDumV1(builder);
  TweedleDumV1.addTheSlice(builder, theSliceOffset);
  TweedleDumV1.addTheBool(builder, theBool);
  return TweedleDumV1.endTweedleDumV1(builder);
}
}
