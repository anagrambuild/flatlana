// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::tweedle_dee_generated::*;
use crate::tweedle_dum_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FLATLANA_INSTRUCTION_DATA: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FLATLANA_INSTRUCTION_DATA: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FLATLANA_INSTRUCTION_DATA: [FlatlanaInstructionData; 3] = [
  FlatlanaInstructionData::NONE,
  FlatlanaInstructionData::DeeV1,
  FlatlanaInstructionData::DumV1,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FlatlanaInstructionData(pub u8);
#[allow(non_upper_case_globals)]
impl FlatlanaInstructionData {
  pub const NONE: Self = Self(0);
  pub const DeeV1: Self = Self(1);
  pub const DumV1: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::DeeV1,
    Self::DumV1,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::DeeV1 => Some("DeeV1"),
      Self::DumV1 => Some("DumV1"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for FlatlanaInstructionData {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for FlatlanaInstructionData {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for FlatlanaInstructionData {
    type Output = FlatlanaInstructionData;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for FlatlanaInstructionData {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FlatlanaInstructionData {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FlatlanaInstructionData {}
pub struct FlatlanaInstructionDataUnionTableOffset {}

pub enum FlatlanaInstructionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FlatlanaInstruction<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlatlanaInstruction<'a> {
  type Inner = FlatlanaInstruction<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FlatlanaInstruction<'a> {
  pub const VT_INSTRUCTION_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_INSTRUCTION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FlatlanaInstruction { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FlatlanaInstructionArgs
  ) -> flatbuffers::WIPOffset<FlatlanaInstruction<'bldr>> {
    let mut builder = FlatlanaInstructionBuilder::new(_fbb);
    if let Some(x) = args.instruction { builder.add_instruction(x); }
    builder.add_instruction_type(args.instruction_type);
    builder.finish()
  }


  #[inline]
  pub fn instruction_type(&self) -> FlatlanaInstructionData {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FlatlanaInstructionData>(FlatlanaInstruction::VT_INSTRUCTION_TYPE, Some(FlatlanaInstructionData::NONE)).unwrap()}
  }
  #[inline]
  pub fn instruction(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(FlatlanaInstruction::VT_INSTRUCTION, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn instruction_as_dee_v1(&self) -> Option<TweedleDeeV1<'a>> {
    if self.instruction_type() == FlatlanaInstructionData::DeeV1 {
      self.instruction().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TweedleDeeV1::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn instruction_as_dum_v1(&self) -> Option<TweedleDumV1<'a>> {
    if self.instruction_type() == FlatlanaInstructionData::DumV1 {
      self.instruction().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TweedleDumV1::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for FlatlanaInstruction<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<FlatlanaInstructionData, _>("instruction_type", Self::VT_INSTRUCTION_TYPE, "instruction", Self::VT_INSTRUCTION, false, |key, v, pos| {
        match key {
          FlatlanaInstructionData::DeeV1 => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TweedleDeeV1>>("FlatlanaInstructionData::DeeV1", pos),
          FlatlanaInstructionData::DumV1 => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TweedleDumV1>>("FlatlanaInstructionData::DumV1", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct FlatlanaInstructionArgs {
    pub instruction_type: FlatlanaInstructionData,
    pub instruction: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for FlatlanaInstructionArgs {
  #[inline]
  fn default() -> Self {
    FlatlanaInstructionArgs {
      instruction_type: FlatlanaInstructionData::NONE,
      instruction: None,
    }
  }
}

pub struct FlatlanaInstructionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FlatlanaInstructionBuilder<'a, 'b> {
  #[inline]
  pub fn add_instruction_type(&mut self, instruction_type: FlatlanaInstructionData) {
    self.fbb_.push_slot::<FlatlanaInstructionData>(FlatlanaInstruction::VT_INSTRUCTION_TYPE, instruction_type, FlatlanaInstructionData::NONE);
  }
  #[inline]
  pub fn add_instruction(&mut self, instruction: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatlanaInstruction::VT_INSTRUCTION, instruction);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FlatlanaInstructionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FlatlanaInstructionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlatlanaInstruction<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FlatlanaInstruction<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FlatlanaInstruction");
      ds.field("instruction_type", &self.instruction_type());
      match self.instruction_type() {
        FlatlanaInstructionData::DeeV1 => {
          if let Some(x) = self.instruction_as_dee_v1() {
            ds.field("instruction", &x)
          } else {
            ds.field("instruction", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FlatlanaInstructionData::DumV1 => {
          if let Some(x) = self.instruction_as_dum_v1() {
            ds.field("instruction", &x)
          } else {
            ds.field("instruction", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("instruction", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FlatlanaInstruction`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flatlana_instruction_unchecked`.
pub fn root_as_flatlana_instruction(buf: &[u8]) -> Result<FlatlanaInstruction, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FlatlanaInstruction>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FlatlanaInstruction` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_flatlana_instruction_unchecked`.
pub fn size_prefixed_root_as_flatlana_instruction(buf: &[u8]) -> Result<FlatlanaInstruction, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FlatlanaInstruction>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FlatlanaInstruction` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flatlana_instruction_unchecked`.
pub fn root_as_flatlana_instruction_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlatlanaInstruction<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FlatlanaInstruction<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FlatlanaInstruction` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flatlana_instruction_unchecked`.
pub fn size_prefixed_root_as_flatlana_instruction_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlatlanaInstruction<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FlatlanaInstruction<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FlatlanaInstruction and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FlatlanaInstruction`.
pub unsafe fn root_as_flatlana_instruction_unchecked(buf: &[u8]) -> FlatlanaInstruction {
  flatbuffers::root_unchecked::<FlatlanaInstruction>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FlatlanaInstruction and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FlatlanaInstruction`.
pub unsafe fn size_prefixed_root_as_flatlana_instruction_unchecked(buf: &[u8]) -> FlatlanaInstruction {
  flatbuffers::size_prefixed_root_unchecked::<FlatlanaInstruction>(buf)
}
#[inline]
pub fn finish_flatlana_instruction_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<FlatlanaInstruction<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_flatlana_instruction_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<FlatlanaInstruction<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
