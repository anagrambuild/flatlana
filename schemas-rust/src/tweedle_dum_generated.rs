// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum TweedleDumV1Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TweedleDumV1<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TweedleDumV1<'a> {
  type Inner = TweedleDumV1<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TweedleDumV1<'a> {
  pub const VT_THE_SLICE: flatbuffers::VOffsetT = 4;
  pub const VT_THE_BOOL: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TweedleDumV1 { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TweedleDumV1Args<'args>
  ) -> flatbuffers::WIPOffset<TweedleDumV1<'bldr>> {
    let mut builder = TweedleDumV1Builder::new(_fbb);
    if let Some(x) = args.the_slice { builder.add_the_slice(x); }
    builder.add_the_bool(args.the_bool);
    builder.finish()
  }


  #[inline]
  pub fn the_slice(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(TweedleDumV1::VT_THE_SLICE, None)}
  }
  #[inline]
  pub fn the_bool(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TweedleDumV1::VT_THE_BOOL, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TweedleDumV1<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("the_slice", Self::VT_THE_SLICE, false)?
     .visit_field::<bool>("the_bool", Self::VT_THE_BOOL, false)?
     .finish();
    Ok(())
  }
}
pub struct TweedleDumV1Args<'a> {
    pub the_slice: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub the_bool: bool,
}
impl<'a> Default for TweedleDumV1Args<'a> {
  #[inline]
  fn default() -> Self {
    TweedleDumV1Args {
      the_slice: None,
      the_bool: false,
    }
  }
}

pub struct TweedleDumV1Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TweedleDumV1Builder<'a, 'b> {
  #[inline]
  pub fn add_the_slice(&mut self, the_slice: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TweedleDumV1::VT_THE_SLICE, the_slice);
  }
  #[inline]
  pub fn add_the_bool(&mut self, the_bool: bool) {
    self.fbb_.push_slot::<bool>(TweedleDumV1::VT_THE_BOOL, the_bool, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TweedleDumV1Builder<'a, 'b> {
    let start = _fbb.start_table();
    TweedleDumV1Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TweedleDumV1<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TweedleDumV1<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TweedleDumV1");
      ds.field("the_slice", &self.the_slice());
      ds.field("the_bool", &self.the_bool());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TweedleDumV1`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tweedle_dum_v1_unchecked`.
pub fn root_as_tweedle_dum_v1(buf: &[u8]) -> Result<TweedleDumV1, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TweedleDumV1>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TweedleDumV1` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_tweedle_dum_v1_unchecked`.
pub fn size_prefixed_root_as_tweedle_dum_v1(buf: &[u8]) -> Result<TweedleDumV1, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TweedleDumV1>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TweedleDumV1` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tweedle_dum_v1_unchecked`.
pub fn root_as_tweedle_dum_v1_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TweedleDumV1<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TweedleDumV1<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TweedleDumV1` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tweedle_dum_v1_unchecked`.
pub fn size_prefixed_root_as_tweedle_dum_v1_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TweedleDumV1<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TweedleDumV1<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TweedleDumV1 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TweedleDumV1`.
pub unsafe fn root_as_tweedle_dum_v1_unchecked(buf: &[u8]) -> TweedleDumV1 {
  flatbuffers::root_unchecked::<TweedleDumV1>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TweedleDumV1 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TweedleDumV1`.
pub unsafe fn size_prefixed_root_as_tweedle_dum_v1_unchecked(buf: &[u8]) -> TweedleDumV1 {
  flatbuffers::size_prefixed_root_unchecked::<TweedleDumV1>(buf)
}
#[inline]
pub fn finish_tweedle_dum_v1_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TweedleDumV1<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_tweedle_dum_v1_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TweedleDumV1<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
